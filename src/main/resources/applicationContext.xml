<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd "
      >
  <!--   &lt;!&ndash;开启事务管理注解&ndash;&gt;
    <aop:aspectj-autoproxy />
    <tx:annotation-driven />-->

    <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>
       <!-- 数据源 -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations" value="classpath:hibernate.properties"/>
    </bean>
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
          destroy-method="close">
        <property name="driverClass" value="${jdbc.driverClassName}" />
        <property name="jdbcUrl" value="${jdbc.url}" />
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!--连接池中保留最小连接数-->
        <property name="minPoolSize" value="1"/>
        <!--连接池中保留的最大连接数-->
        <property name="maxPoolSize" value="15"/>
        <!--最大空闲时间，1800秒内未使用则连接被丢弃，若为0则永不丢弃-->
        <property name="maxIdleTime" value="1800"/>
        <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数-->
        <property name="acquireIncrement" value="3"/>
        <property name="maxStatements" value="1000"/>
        <property name="initialPoolSize" value="10"/>
        <!--每60秒检查所有连接池中的空闲连接-->
        <property name="idleConnectionTestPeriod" value="60"/>
        <!--定义在从数据库获取新连接失败后重复尝试的次数-->
        <property name="acquireRetryAttempts" value="30"/>
        <property name="breakAfterAcquireFailure" value="true"/>
        <property name="testConnectionOnCheckout" value="false"/>

    </bean>
       <!-- 配置sessionFactory -->
       <bean id="sessionFactory"
             class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
             <property name="dataSource" ref="dataSource" />
            <!-- <property name="packagesToScan" value="com.smartcar.model" />--> <!-- 实体类的包 -->
           <property name="mappingResources">
               <list>
                   <value>Battery.hbm.xml</value>
                   <value>CarBasic.hbm.xml</value>
                   <value>CarInfo.hbm.xml</value>
                   <value>SensorClass.hbm.xml</value>
                   <value>SensorList.hbm.xml</value>
               </list>
           </property>
              <property name="hibernateProperties">
                  <props>
                            <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                            <prop key="hibernate.show_sql">true</prop>
                            <!-- 会自动创表，但是不会自动创建数据库，所以要先手动创建数据库。 -->
                            <prop key="hibernate.hbm2ddl.auto">update</prop>
                            <prop key="hibernate.format_sql">true</prop>
                      <prop key="hibernate.connection.autocommit">true</prop>
                      <prop key="hibernate.connection.url">jdbc:mysql://localhost:3306/smartcar</prop>
                      <prop key="hibernate.connection.driver_class">com.mysql.jdbc.Driver</prop>
                  </props>
              </property>
           <property name="annotatedClasses">
               <list>
                   <value>com.smartcar.model.Battery</value>
                   <value>com.smartcar.model.CarInfo</value>
                   <value>com.smartcar.model.CarBasic</value>
               </list>
           </property>

       </bean>

    <!--my defined beans-->
    <!--<bean id="generalDao" class="com.smartcar.dao.GeneralDAOImpl" />
    <bean id="carBasicService" class="com.smartcar.service.impl.CarBasicServiceImpl"/>
    <bean id="carInfoService" class="com.smartcar.service.impl.CarInfoServiceImpl"/>
    <bean id="batteryService" class="com.smartcar.service.impl.BatteryServiceImpl"/>
-->
    <!-- 配置事务管理 -->
    <bean id="transactionManager"
          class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

    <!-- 用于注入到GeneralDao中 -->
    <bean id="hibernateTemplate" class="org.springframework.orm.hibernate4.HibernateTemplate" >
        <property name="sessionFactory" ref="sessionFactory" />
        <!--<property name="checkWriteOperations" value="false"></property>-->
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
    <!-- <aop:config>
         <aop:advisor id="managerTx" advice-ref="txAdvice" pointcut="execution(* com.smartcar.service..*.*(..))"
                      order="1"/>
     </aop:config>-->
   <!-- <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="save*" propagation="REQUIRED" read-only="false" />
            <tx:method name="update*" propagation="REQUIRED" read-only="false" />
            <tx:method name="delete*" propagation="REQUIRED" read-only="false" />
        </tx:attributes>
    </tx:advice>-->

    <!-- TCP -->
    <!--此部分被 NioSocketAcceptor 隐式使用，无此则会报字符串无法转换成 InetSocketAddress -->
    <bean id="customEditorConfigurer"
          class="org.springframework.beans.factory.config.CustomEditorConfigurer">
        <property name="customEditors">
            <map>
                <entry key="java.net.SocketAddress"
                       value="org.apache.mina.integration.beans.InetSocketAddressEditor" />
            </map>
        </property>
    </bean>
    <bean id="tcpServerHandler" class="com.smartcar.mina.TCPServerHandler"/>
    <bean id="tcpAddress" class="com.smartcar.mina.ServerIpTCP"/>

    <bean id="loggingFilter" class="org.apache.mina.filter.logging.LoggingFilter"/>

    <bean id="codecFilter" class="org.apache.mina.filter.codec.ProtocolCodecFilter">
        <constructor-arg>
            <bean class="com.smartcar.mina.MyCodecFactory"/>
        </constructor-arg>
    </bean>

    <bean id="filterChainBuilder"
          class="org.apache.mina.core.filterchain.DefaultIoFilterChainBuilder">
        <property name="filters">
            <map>
                <entry key="loggingFilter" value-ref="loggingFilter"/>
                <!--<entry key="codecFilter" value-ref="codecFilter"/>-->
            </map>
        </property>
    </bean>
    <bean id="TCPAcceptor" class="org.apache.mina.transport.socket.nio.NioSocketAcceptor"
          init-method="bind" destroy-method="unbind">
        <property name="defaultLocalAddress" ref="tcpAddress"/>
        <property name="handler" ref="tcpServerHandler"/>
        <property name="filterChainBuilder" ref="filterChainBuilder"/>
        <property name="reuseAddress" value="true"/>
    </bean>
</beans>